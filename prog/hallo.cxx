// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*! 
 * @file hallo.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace { char dummy; }
#endif

#include "hallo.h"

#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

airvision::contracts::point_cloud_response::point_cloud_response()
{
    m_index = 0;


}

airvision::contracts::point_cloud_response::~point_cloud_response()
{
}

airvision::contracts::point_cloud_response::point_cloud_response(const point_cloud_response &x)
{
    m_index = x.m_index;
    m_data = x.m_data;
    m_filename = x.m_filename;
}

airvision::contracts::point_cloud_response::point_cloud_response(point_cloud_response &&x)
{
    m_index = x.m_index;
    m_data = std::move(x.m_data);
    m_filename = std::move(x.m_filename);
}

airvision::contracts::point_cloud_response& airvision::contracts::point_cloud_response::operator=(const point_cloud_response &x)
{
    m_index = x.m_index;
    m_data = x.m_data;
    m_filename = x.m_filename;
    
    return *this;
}

airvision::contracts::point_cloud_response& airvision::contracts::point_cloud_response::operator=(point_cloud_response &&x)
{
    m_index = x.m_index;
    m_data = std::move(x.m_data);
    m_filename = std::move(x.m_filename);
    
    return *this;
}

size_t airvision::contracts::point_cloud_response::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;
            
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    current_alignment += (20971520 * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;


    return current_alignment - initial_alignment;
}

size_t airvision::contracts::point_cloud_response::getCdrSerializedSize(const airvision::contracts::point_cloud_response& data, size_t current_alignment)
{
    size_t initial_alignment = current_alignment;
            
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    current_alignment += (data.data().size() * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.filename().size() + 1;


    return current_alignment - initial_alignment;
}

void airvision::contracts::point_cloud_response::serialize(eprosima::fastcdr::Cdr &scdr) const
{
    scdr << m_index;

    if(m_data.size() <= 20971520)
    scdr << m_data;
    else
        throw eprosima::fastcdr::exception::BadParamException("data field exceeds the maximum length");
    if(m_filename.length() <= 255)
    scdr << m_filename;
    else
        throw eprosima::fastcdr::exception::BadParamException("filename field exceeds the maximum length");
}

void airvision::contracts::point_cloud_response::deserialize(eprosima::fastcdr::Cdr &dcdr)
{
    dcdr >> m_index;
    dcdr >> m_data;
    dcdr >> m_filename;
}

size_t airvision::contracts::point_cloud_response::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
	size_t current_align = current_alignment;
            




    return current_align;
}

bool airvision::contracts::point_cloud_response::isKeyDefined()
{
    return false;
}

void airvision::contracts::point_cloud_response::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
	 
	 
	 
}
airvision::contracts::point_cloud_request::point_cloud_request()
{

    m_index = 0;
}

airvision::contracts::point_cloud_request::~point_cloud_request()
{
}

airvision::contracts::point_cloud_request::point_cloud_request(const point_cloud_request &x)
{
    m_msg = x.m_msg;
    m_index = x.m_index;
}

airvision::contracts::point_cloud_request::point_cloud_request(point_cloud_request &&x)
{
    m_msg = std::move(x.m_msg);
    m_index = x.m_index;
}

airvision::contracts::point_cloud_request& airvision::contracts::point_cloud_request::operator=(const point_cloud_request &x)
{
    m_msg = x.m_msg;
    m_index = x.m_index;
    
    return *this;
}

airvision::contracts::point_cloud_request& airvision::contracts::point_cloud_request::operator=(point_cloud_request &&x)
{
    m_msg = std::move(x.m_msg);
    m_index = x.m_index;
    
    return *this;
}

size_t airvision::contracts::point_cloud_request::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;
            
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    return current_alignment - initial_alignment;
}

size_t airvision::contracts::point_cloud_request::getCdrSerializedSize(const airvision::contracts::point_cloud_request& data, size_t current_alignment)
{
    size_t initial_alignment = current_alignment;
            
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.msg().size() + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    return current_alignment - initial_alignment;
}

void airvision::contracts::point_cloud_request::serialize(eprosima::fastcdr::Cdr &scdr) const
{
    if(m_msg.length() <= 255)
    scdr << m_msg;
    else
        throw eprosima::fastcdr::exception::BadParamException("msg field exceeds the maximum length");
    scdr << m_index;

}

void airvision::contracts::point_cloud_request::deserialize(eprosima::fastcdr::Cdr &dcdr)
{
    dcdr >> m_msg;
    dcdr >> m_index;
}

size_t airvision::contracts::point_cloud_request::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
	size_t current_align = current_alignment;
            



    return current_align;
}

bool airvision::contracts::point_cloud_request::isKeyDefined()
{
    return false;
}

void airvision::contracts::point_cloud_request::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
	 
	 
}

