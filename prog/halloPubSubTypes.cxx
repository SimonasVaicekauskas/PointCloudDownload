// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*! 
 * @file halloPubSubTypes.cpp
 * This header file contains the implementation of the serialization functions.
 *
 * This file was generated by the tool fastcdrgen.
 */


#include <fastcdr/FastBuffer.h>
#include <fastcdr/Cdr.h>

#include "halloPubSubTypes.h"

namespace airvision
{
    namespace contracts
    {
        point_cloud_responsePubSubType::point_cloud_responsePubSubType() {
        	setName("airvision::contracts::point_cloud_response");
        	m_typeSize = (uint32_t)point_cloud_response::getMaxCdrSerializedSize();
        	m_isGetKeyDefined = point_cloud_response::isKeyDefined();
        	m_keyBuffer = (unsigned char*)malloc(point_cloud_response::getKeyMaxCdrSerializedSize()>16 ? point_cloud_response::getKeyMaxCdrSerializedSize() : 16);
        }

        point_cloud_responsePubSubType::~point_cloud_responsePubSubType() {
        	if(m_keyBuffer!=nullptr)
        		free(m_keyBuffer);
        }

        bool point_cloud_responsePubSubType::serialize(void *data, SerializedPayload_t *payload) {
        	point_cloud_response *p_type = (point_cloud_response*) data;
        	eprosima::fastcdr::FastBuffer fastbuffer((char*) payload->data, payload->max_size); // Object that manages the raw buffer.
        	eprosima::fastcdr::Cdr ser(fastbuffer); 	// Object that serializes the data.
            payload->encapsulation = ser.endianness() == eprosima::fastcdr::Cdr::BIG_ENDIANNESS ? CDR_BE : CDR_LE;
        	p_type->serialize(ser); 	// Serialize the object:
            payload->length = (uint32_t)ser.getSerializedDataLength(); 	//Get the serialized length
        	return true;
        }

        bool point_cloud_responsePubSubType::deserialize(SerializedPayload_t* payload, void* data) {
        	point_cloud_response* p_type = (point_cloud_response*) data; 	//Convert DATA to pointer of your type
        	eprosima::fastcdr::FastBuffer fastbuffer((char*)payload->data, payload->length); 	// Object that manages the raw buffer.
        	eprosima::fastcdr::Cdr deser(fastbuffer, payload->encapsulation == CDR_BE ? eprosima::fastcdr::Cdr::BIG_ENDIANNESS : eprosima::fastcdr::Cdr::LITTLE_ENDIANNESS); 	// Object that deserializes the data.
        	p_type->deserialize(deser);	//Deserialize the object:
        	return true;
        }

        std::function<uint32_t()> point_cloud_responsePubSubType::getSerializedSizeProvider(void* data) {
            return [data]() -> uint32_t { return (uint32_t)type::getCdrSerializedSize(*static_cast<point_cloud_response*>(data)); };
        }

        void* point_cloud_responsePubSubType::createData() {
        	return (void*)new point_cloud_response();
        }

        void point_cloud_responsePubSubType::deleteData(void* data) {
        	delete((point_cloud_response*)data);
        }

        bool point_cloud_responsePubSubType::getKey(void *data, InstanceHandle_t* handle) {
        	if(!m_isGetKeyDefined)
        		return false;
        	point_cloud_response* p_type = (point_cloud_response*) data;
        	eprosima::fastcdr::FastBuffer fastbuffer((char*)m_keyBuffer,point_cloud_response::getKeyMaxCdrSerializedSize()); 	// Object that manages the raw buffer.
        	eprosima::fastcdr::Cdr ser(fastbuffer, eprosima::fastcdr::Cdr::BIG_ENDIANNESS); 	// Object that serializes the data.
        	p_type->serializeKey(ser);
        	if(point_cloud_response::getKeyMaxCdrSerializedSize()>16)	{
        		m_md5.init();
        		m_md5.update(m_keyBuffer,(unsigned int)ser.getSerializedDataLength());
        		m_md5.finalize();
        		for(uint8_t i = 0;i<16;++i)    	{
                	handle->value[i] = m_md5.digest[i];
            	}
            }
            else    {
            	for(uint8_t i = 0;i<16;++i)    	{
                	handle->value[i] = m_keyBuffer[i];
            	}
            }
        	return true;
        }

        point_cloud_requestPubSubType::point_cloud_requestPubSubType() {
        	setName("airvision::contracts::point_cloud_request");
        	m_typeSize = (uint32_t)point_cloud_request::getMaxCdrSerializedSize();
        	m_isGetKeyDefined = point_cloud_request::isKeyDefined();
        	m_keyBuffer = (unsigned char*)malloc(point_cloud_request::getKeyMaxCdrSerializedSize()>16 ? point_cloud_request::getKeyMaxCdrSerializedSize() : 16);
        }

        point_cloud_requestPubSubType::~point_cloud_requestPubSubType() {
        	if(m_keyBuffer!=nullptr)
        		free(m_keyBuffer);
        }

        bool point_cloud_requestPubSubType::serialize(void *data, SerializedPayload_t *payload) {
        	point_cloud_request *p_type = (point_cloud_request*) data;
        	eprosima::fastcdr::FastBuffer fastbuffer((char*) payload->data, payload->max_size); // Object that manages the raw buffer.
        	eprosima::fastcdr::Cdr ser(fastbuffer); 	// Object that serializes the data.
            payload->encapsulation = ser.endianness() == eprosima::fastcdr::Cdr::BIG_ENDIANNESS ? CDR_BE : CDR_LE;
        	p_type->serialize(ser); 	// Serialize the object:
            payload->length = (uint32_t)ser.getSerializedDataLength(); 	//Get the serialized length
        	return true;
        }

        bool point_cloud_requestPubSubType::deserialize(SerializedPayload_t* payload, void* data) {
        	point_cloud_request* p_type = (point_cloud_request*) data; 	//Convert DATA to pointer of your type
        	eprosima::fastcdr::FastBuffer fastbuffer((char*)payload->data, payload->length); 	// Object that manages the raw buffer.
        	eprosima::fastcdr::Cdr deser(fastbuffer, payload->encapsulation == CDR_BE ? eprosima::fastcdr::Cdr::BIG_ENDIANNESS : eprosima::fastcdr::Cdr::LITTLE_ENDIANNESS); 	// Object that deserializes the data.
        	p_type->deserialize(deser);	//Deserialize the object:
        	return true;
        }

        std::function<uint32_t()> point_cloud_requestPubSubType::getSerializedSizeProvider(void* data) {
            return [data]() -> uint32_t { return (uint32_t)type::getCdrSerializedSize(*static_cast<point_cloud_request*>(data)); };
        }

        void* point_cloud_requestPubSubType::createData() {
        	return (void*)new point_cloud_request();
        }

        void point_cloud_requestPubSubType::deleteData(void* data) {
        	delete((point_cloud_request*)data);
        }

        bool point_cloud_requestPubSubType::getKey(void *data, InstanceHandle_t* handle) {
        	if(!m_isGetKeyDefined)
        		return false;
        	point_cloud_request* p_type = (point_cloud_request*) data;
        	eprosima::fastcdr::FastBuffer fastbuffer((char*)m_keyBuffer,point_cloud_request::getKeyMaxCdrSerializedSize()); 	// Object that manages the raw buffer.
        	eprosima::fastcdr::Cdr ser(fastbuffer, eprosima::fastcdr::Cdr::BIG_ENDIANNESS); 	// Object that serializes the data.
        	p_type->serializeKey(ser);
        	if(point_cloud_request::getKeyMaxCdrSerializedSize()>16)	{
        		m_md5.init();
        		m_md5.update(m_keyBuffer,(unsigned int)ser.getSerializedDataLength());
        		m_md5.finalize();
        		for(uint8_t i = 0;i<16;++i)    	{
                	handle->value[i] = m_md5.digest[i];
            	}
            }
            else    {
            	for(uint8_t i = 0;i<16;++i)    	{
                	handle->value[i] = m_keyBuffer[i];
            	}
            }
        	return true;
        }


    } //End of namespace contracts

} //End of namespace airvision
