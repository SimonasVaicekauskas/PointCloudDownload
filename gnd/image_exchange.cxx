// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*! 
 * @file image_exchange.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace { char dummy; }
#endif

#include "image_exchange.h"

#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

airvision::contracts::image_response::image_response()
{
    m_index = 0;


    m_date = 0;
    m_time = 0;
    m_status = 0;
}

airvision::contracts::image_response::~image_response()
{
}

airvision::contracts::image_response::image_response(const image_response &x)
{
    m_index = x.m_index;
    m_data = x.m_data;
    m_filename = x.m_filename;
    m_date = x.m_date;
    m_time = x.m_time;
    m_status = x.m_status;
}

airvision::contracts::image_response::image_response(image_response &&x)
{
    m_index = x.m_index;
    m_data = std::move(x.m_data);
    m_filename = std::move(x.m_filename);
    m_date = x.m_date;
    m_time = x.m_time;
    m_status = x.m_status;
}

airvision::contracts::image_response& airvision::contracts::image_response::operator=(const image_response &x)
{
    m_index = x.m_index;
    m_data = x.m_data;
    m_filename = x.m_filename;
    m_date = x.m_date;
    m_time = x.m_time;
    m_status = x.m_status;
    
    return *this;
}

airvision::contracts::image_response& airvision::contracts::image_response::operator=(image_response &&x)
{
    m_index = x.m_index;
    m_data = std::move(x.m_data);
    m_filename = std::move(x.m_filename);
    m_date = x.m_date;
    m_time = x.m_time;
    m_status = x.m_status;
    
    return *this;
}

size_t airvision::contracts::image_response::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;
            
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    current_alignment += (20971520 * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) +  + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    return current_alignment - initial_alignment;
}

size_t airvision::contracts::image_response::getCdrSerializedSize(const airvision::contracts::image_response& data, size_t current_alignment)
{
    size_t initial_alignment = current_alignment;
            
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    current_alignment += (data.data().size() * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.filename().size() + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    return current_alignment - initial_alignment;
}

void airvision::contracts::image_response::serialize(eprosima::fastcdr::Cdr &scdr) const
{
    scdr << m_index;

    if(m_data.size() <= 20971520)
    scdr << m_data;
    else
        throw eprosima::fastcdr::exception::BadParamException("data field exceeds the maximum length");
    scdr << m_filename;

    scdr << m_date;

    scdr << m_time;

    scdr << m_status;

}

void airvision::contracts::image_response::deserialize(eprosima::fastcdr::Cdr &dcdr)
{
    dcdr >> m_index;
    dcdr >> m_data;
    dcdr >> m_filename;
    dcdr >> m_date;
    dcdr >> m_time;
    dcdr >> m_status;
}

size_t airvision::contracts::image_response::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
	size_t current_align = current_alignment;
            







    return current_align;
}

bool airvision::contracts::image_response::isKeyDefined()
{
    return false;
}

void airvision::contracts::image_response::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
	 
	 
	 
	 
	 
	 
}
airvision::contracts::image_request::image_request()
{
    m_index = 0;
    m_image_date = 0;
    m_image_time = 0;
    m_length = 0;
    m_fps_a = 0;
    m_fps_b = 0;
    m_image_width = 0;
    m_image_height = 0;
}

airvision::contracts::image_request::~image_request()
{
}

airvision::contracts::image_request::image_request(const image_request &x)
{
    m_index = x.m_index;
    m_image_date = x.m_image_date;
    m_image_time = x.m_image_time;
    m_length = x.m_length;
    m_fps_a = x.m_fps_a;
    m_fps_b = x.m_fps_b;
    m_image_width = x.m_image_width;
    m_image_height = x.m_image_height;
}

airvision::contracts::image_request::image_request(image_request &&x)
{
    m_index = x.m_index;
    m_image_date = x.m_image_date;
    m_image_time = x.m_image_time;
    m_length = x.m_length;
    m_fps_a = x.m_fps_a;
    m_fps_b = x.m_fps_b;
    m_image_width = x.m_image_width;
    m_image_height = x.m_image_height;
}

airvision::contracts::image_request& airvision::contracts::image_request::operator=(const image_request &x)
{
    m_index = x.m_index;
    m_image_date = x.m_image_date;
    m_image_time = x.m_image_time;
    m_length = x.m_length;
    m_fps_a = x.m_fps_a;
    m_fps_b = x.m_fps_b;
    m_image_width = x.m_image_width;
    m_image_height = x.m_image_height;
    
    return *this;
}

airvision::contracts::image_request& airvision::contracts::image_request::operator=(image_request &&x)
{
    m_index = x.m_index;
    m_image_date = x.m_image_date;
    m_image_time = x.m_image_time;
    m_length = x.m_length;
    m_fps_a = x.m_fps_a;
    m_fps_b = x.m_fps_b;
    m_image_width = x.m_image_width;
    m_image_height = x.m_image_height;
    
    return *this;
}

size_t airvision::contracts::image_request::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;
            
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);

    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);

    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);

    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    return current_alignment - initial_alignment;
}

size_t airvision::contracts::image_request::getCdrSerializedSize(const airvision::contracts::image_request& data, size_t current_alignment)
{
    size_t initial_alignment = current_alignment;
            
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);

    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);

    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);

    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    return current_alignment - initial_alignment;
}

void airvision::contracts::image_request::serialize(eprosima::fastcdr::Cdr &scdr) const
{
    scdr << m_index;

    scdr << m_image_date;

    scdr << m_image_time;

    scdr << m_length;

    scdr << m_fps_a;

    scdr << m_fps_b;

    scdr << m_image_width;

    scdr << m_image_height;

}

void airvision::contracts::image_request::deserialize(eprosima::fastcdr::Cdr &dcdr)
{
    dcdr >> m_index;
    dcdr >> m_image_date;
    dcdr >> m_image_time;
    dcdr >> m_length;
    dcdr >> m_fps_a;
    dcdr >> m_fps_b;
    dcdr >> m_image_width;
    dcdr >> m_image_height;
}

size_t airvision::contracts::image_request::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
	size_t current_align = current_alignment;
            









    return current_align;
}

bool airvision::contracts::image_request::isKeyDefined()
{
    return false;
}

void airvision::contracts::image_request::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
	 
	 
	 
	 
	 
	 
	 
	 
}

