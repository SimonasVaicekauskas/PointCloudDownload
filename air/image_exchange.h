// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*! 
 * @file image_exchange.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _image_exchange_H_
#define _image_exchange_H_

// TODO Poner en el contexto.

#include <stdint.h>
#include <array>
#include <string>
#include <vector>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif
#else
#define eProsima_user_DllExport
#endif

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(image_exchange_SOURCE)
#define image_exchange_DllAPI __declspec( dllexport )
#else
#define image_exchange_DllAPI __declspec( dllimport )
#endif // image_exchange_SOURCE
#else
#define image_exchange_DllAPI
#endif
#else
#define image_exchange_DllAPI
#endif // _WIN32

namespace eprosima
{
    namespace fastcdr
    {
        class Cdr;
    }
}

namespace airvision
{
    namespace contracts
    {
        /*!
         * @brief This class represents the structure image_response defined by the user in the IDL file.
         * @ingroup IMAGE_EXCHANGE
         */
        class image_response
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport image_response();
            
            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~image_response();
            
            /*!
             * @brief Copy constructor.
             * @param x Reference to the object airvision::contracts::image_response that will be copied.
             */
            eProsima_user_DllExport image_response(const image_response &x);
            
            /*!
             * @brief Move constructor.
             * @param x Reference to the object airvision::contracts::image_response that will be copied.
             */
            eProsima_user_DllExport image_response(image_response &&x);
            
            /*!
             * @brief Copy assignment.
             * @param x Reference to the object airvision::contracts::image_response that will be copied.
             */
            eProsima_user_DllExport image_response& operator=(const image_response &x);
            
            /*!
             * @brief Move assignment.
             * @param x Reference to the object airvision::contracts::image_response that will be copied.
             */
            eProsima_user_DllExport image_response& operator=(image_response &&x);
            
            /*!
             * @brief This function sets a value in member index
             * @param _index New value for member index
             */
            inline eProsima_user_DllExport void index(uint32_t _index)
            {
                m_index = _index;
            }

            /*!
             * @brief This function returns the value of member index
             * @return Value of member index
             */
            inline eProsima_user_DllExport uint32_t index() const
            {
                return m_index;
            }

            /*!
             * @brief This function returns a reference to member index
             * @return Reference to member index
             */
            inline eProsima_user_DllExport uint32_t& index()
            {
                return m_index;
            }
            /*!
             * @brief This function copies the value in member data
             * @param _data New value to be copied in member data
             */
            inline eProsima_user_DllExport void data(const std::vector<char> &_data)
            {
                m_data = _data;
            }

            /*!
             * @brief This function moves the value in member data
             * @param _data New value to be moved in member data
             */
            inline eProsima_user_DllExport void data(std::vector<char> &&_data)
            {
                m_data = std::move(_data);
            }

            /*!
             * @brief This function returns a constant reference to member data
             * @return Constant reference to member data
             */
            inline eProsima_user_DllExport const std::vector<char>& data() const
            {
                return m_data;
            }

            /*!
             * @brief This function returns a reference to member data
             * @return Reference to member data
             */
            inline eProsima_user_DllExport std::vector<char>& data()
            {
                return m_data;
            }
            /*!
             * @brief This function copies the value in member filename
             * @param _filename New value to be copied in member filename
             */
            inline eProsima_user_DllExport void filename(const std::string &_filename)
            {
                m_filename = _filename;
            }

            /*!
             * @brief This function moves the value in member filename
             * @param _filename New value to be moved in member filename
             */
            inline eProsima_user_DllExport void filename(std::string &&_filename)
            {
                m_filename = std::move(_filename);
            }

            /*!
             * @brief This function returns a constant reference to member filename
             * @return Constant reference to member filename
             */
            inline eProsima_user_DllExport const std::string& filename() const
            {
                return m_filename;
            }

            /*!
             * @brief This function returns a reference to member filename
             * @return Reference to member filename
             */
            inline eProsima_user_DllExport std::string& filename()
            {
                return m_filename;
            }
            /*!
             * @brief This function sets a value in member date
             * @param _date New value for member date
             */
            inline eProsima_user_DllExport void date(uint32_t _date)
            {
                m_date = _date;
            }

            /*!
             * @brief This function returns the value of member date
             * @return Value of member date
             */
            inline eProsima_user_DllExport uint32_t date() const
            {
                return m_date;
            }

            /*!
             * @brief This function returns a reference to member date
             * @return Reference to member date
             */
            inline eProsima_user_DllExport uint32_t& date()
            {
                return m_date;
            }
            /*!
             * @brief This function sets a value in member time
             * @param _time New value for member time
             */
            inline eProsima_user_DllExport void time(uint32_t _time)
            {
                m_time = _time;
            }

            /*!
             * @brief This function returns the value of member time
             * @return Value of member time
             */
            inline eProsima_user_DllExport uint32_t time() const
            {
                return m_time;
            }

            /*!
             * @brief This function returns a reference to member time
             * @return Reference to member time
             */
            inline eProsima_user_DllExport uint32_t& time()
            {
                return m_time;
            }
            /*!
             * @brief This function sets a value in member status
             * @param _status New value for member status
             */
            inline eProsima_user_DllExport void status(int16_t _status)
            {
                m_status = _status;
            }

            /*!
             * @brief This function returns the value of member status
             * @return Value of member status
             */
            inline eProsima_user_DllExport int16_t status() const
            {
                return m_status;
            }

            /*!
             * @brief This function returns a reference to member status
             * @return Reference to member status
             */
            inline eProsima_user_DllExport int16_t& status()
            {
                return m_status;
            }
            
            /*!
             * @brief This function returns the maximum serialized size of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(const airvision::contracts::image_response& data, size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
            
        private:
            uint32_t m_index;
            std::vector<char> m_data;
            std::string m_filename;
            uint32_t m_date;
            uint32_t m_time;
            int16_t m_status;
        };
        /*!
         * @brief This class represents the structure image_request defined by the user in the IDL file.
         * @ingroup IMAGE_EXCHANGE
         */
        class image_request
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport image_request();
            
            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~image_request();
            
            /*!
             * @brief Copy constructor.
             * @param x Reference to the object airvision::contracts::image_request that will be copied.
             */
            eProsima_user_DllExport image_request(const image_request &x);
            
            /*!
             * @brief Move constructor.
             * @param x Reference to the object airvision::contracts::image_request that will be copied.
             */
            eProsima_user_DllExport image_request(image_request &&x);
            
            /*!
             * @brief Copy assignment.
             * @param x Reference to the object airvision::contracts::image_request that will be copied.
             */
            eProsima_user_DllExport image_request& operator=(const image_request &x);
            
            /*!
             * @brief Move assignment.
             * @param x Reference to the object airvision::contracts::image_request that will be copied.
             */
            eProsima_user_DllExport image_request& operator=(image_request &&x);
            
            /*!
             * @brief This function sets a value in member index
             * @param _index New value for member index
             */
            inline eProsima_user_DllExport void index(uint32_t _index)
            {
                m_index = _index;
            }

            /*!
             * @brief This function returns the value of member index
             * @return Value of member index
             */
            inline eProsima_user_DllExport uint32_t index() const
            {
                return m_index;
            }

            /*!
             * @brief This function returns a reference to member index
             * @return Reference to member index
             */
            inline eProsima_user_DllExport uint32_t& index()
            {
                return m_index;
            }
            /*!
             * @brief This function sets a value in member image_date
             * @param _image_date New value for member image_date
             */
            inline eProsima_user_DllExport void image_date(uint32_t _image_date)
            {
                m_image_date = _image_date;
            }

            /*!
             * @brief This function returns the value of member image_date
             * @return Value of member image_date
             */
            inline eProsima_user_DllExport uint32_t image_date() const
            {
                return m_image_date;
            }

            /*!
             * @brief This function returns a reference to member image_date
             * @return Reference to member image_date
             */
            inline eProsima_user_DllExport uint32_t& image_date()
            {
                return m_image_date;
            }
            /*!
             * @brief This function sets a value in member image_time
             * @param _image_time New value for member image_time
             */
            inline eProsima_user_DllExport void image_time(uint32_t _image_time)
            {
                m_image_time = _image_time;
            }

            /*!
             * @brief This function returns the value of member image_time
             * @return Value of member image_time
             */
            inline eProsima_user_DllExport uint32_t image_time() const
            {
                return m_image_time;
            }

            /*!
             * @brief This function returns a reference to member image_time
             * @return Reference to member image_time
             */
            inline eProsima_user_DllExport uint32_t& image_time()
            {
                return m_image_time;
            }
            /*!
             * @brief This function sets a value in member length
             * @param _length New value for member length
             */
            inline eProsima_user_DllExport void length(uint32_t _length)
            {
                m_length = _length;
            }

            /*!
             * @brief This function returns the value of member length
             * @return Value of member length
             */
            inline eProsima_user_DllExport uint32_t length() const
            {
                return m_length;
            }

            /*!
             * @brief This function returns a reference to member length
             * @return Reference to member length
             */
            inline eProsima_user_DllExport uint32_t& length()
            {
                return m_length;
            }
            /*!
             * @brief This function sets a value in member fps_a
             * @param _fps_a New value for member fps_a
             */
            inline eProsima_user_DllExport void fps_a(uint16_t _fps_a)
            {
                m_fps_a = _fps_a;
            }

            /*!
             * @brief This function returns the value of member fps_a
             * @return Value of member fps_a
             */
            inline eProsima_user_DllExport uint16_t fps_a() const
            {
                return m_fps_a;
            }

            /*!
             * @brief This function returns a reference to member fps_a
             * @return Reference to member fps_a
             */
            inline eProsima_user_DllExport uint16_t& fps_a()
            {
                return m_fps_a;
            }
            /*!
             * @brief This function sets a value in member fps_b
             * @param _fps_b New value for member fps_b
             */
            inline eProsima_user_DllExport void fps_b(uint16_t _fps_b)
            {
                m_fps_b = _fps_b;
            }

            /*!
             * @brief This function returns the value of member fps_b
             * @return Value of member fps_b
             */
            inline eProsima_user_DllExport uint16_t fps_b() const
            {
                return m_fps_b;
            }

            /*!
             * @brief This function returns a reference to member fps_b
             * @return Reference to member fps_b
             */
            inline eProsima_user_DllExport uint16_t& fps_b()
            {
                return m_fps_b;
            }
            /*!
             * @brief This function sets a value in member image_width
             * @param _image_width New value for member image_width
             */
            inline eProsima_user_DllExport void image_width(uint16_t _image_width)
            {
                m_image_width = _image_width;
            }

            /*!
             * @brief This function returns the value of member image_width
             * @return Value of member image_width
             */
            inline eProsima_user_DllExport uint16_t image_width() const
            {
                return m_image_width;
            }

            /*!
             * @brief This function returns a reference to member image_width
             * @return Reference to member image_width
             */
            inline eProsima_user_DllExport uint16_t& image_width()
            {
                return m_image_width;
            }
            /*!
             * @brief This function sets a value in member image_height
             * @param _image_height New value for member image_height
             */
            inline eProsima_user_DllExport void image_height(uint16_t _image_height)
            {
                m_image_height = _image_height;
            }

            /*!
             * @brief This function returns the value of member image_height
             * @return Value of member image_height
             */
            inline eProsima_user_DllExport uint16_t image_height() const
            {
                return m_image_height;
            }

            /*!
             * @brief This function returns a reference to member image_height
             * @return Reference to member image_height
             */
            inline eProsima_user_DllExport uint16_t& image_height()
            {
                return m_image_height;
            }
            
            /*!
             * @brief This function returns the maximum serialized size of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(const airvision::contracts::image_request& data, size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
            
        private:
            uint32_t m_index;
            uint32_t m_image_date;
            uint32_t m_image_time;
            uint32_t m_length;
            uint16_t m_fps_a;
            uint16_t m_fps_b;
            uint16_t m_image_width;
            uint16_t m_image_height;
        };
    }
}

#endif // _image_exchange_H_